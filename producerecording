#!/bin/bash

texteditor="pluma"
videoplayer="vlc"

die () {
  c=$(caller)
  if [[ $c != 1* ]]; then
    echo >&2 "Error at line $c:"
    echo >&2 "   $@"
  else
    echo >&2 "$@"
  fi
  exit 1
}


Help()
{
   # Display Help
   echo "Produce a lecture recording."
   echo
   echo "By default, this does nothing :-)"
   echo
   echo "Syntax: $0 [-h][-a][-s][-c] basename"
   echo "options:"
   echo "h   Print this Help."
   echo "a   Modify audio."
   echo "s   This produces an mp4-Slideshow-video using the screencast and the audio. No webcam video is used."
   echo "c   This produces an mp4-video Combining the screencast and the audio and overlays the screencast with the webcam video."
   echo "v   This glues together audio and webcam video."
   echo
}

trap_with_arg() {
  func="$1" ; shift
  for sig ; do
    trap "$func exiting - caught $sig" "$sig"
  done
}

# http://redsymbol.net/articles/bash-exit-traps/
# wrapper function for signal https://stackoverflow.com/questions/9256644/identifying-received-signal-name-in-bash
trap_with_arg die ERR HUP INT QUIT TERM SIGHUP SIGINT SIGTERM 

MOD_AUDIO=0
SLIDESHOW=0
COMBINED=0
WEBCAMAUDIO=0

while getopts ":hascv" opt; do
  case ${opt} in
    a )
      MOD_AUDIO=1
      ;;
    c )
      COMBINED=1
      ;;
    s )
      SLIDESHOW=1
      ;;
    v )
      WEBCAMAUDIO=1
      ;;
    \? )
      Help
      exit;;
    h )
      Help
      exit;;
  esac
done
shift $((OPTIND -1))
[ $# == 1 ] || { Help ; die "too few arguments" ; }


if [[ $# == 1 ]]; then
basefile="$1"

audioFile="$basefile-audio.flac"
screenFile="$basefile-screen.mkv"
timingfile="$basefile-timing.chap"
finalFileNoFace="$basefile.mp4"
webcamFile="$basefile-webcam.mkv"
webcamWithAudioFile="$basefile-webcam-audio.mkv"
finalFile="$basefile-combined.mp4"
else
audioFile="$1"
screenFile="$2"
timingfile="$3"
finalFileNoFace="$4"
webcamFile="$5"
finalFile="$6"
webcamWithAudioFile="$7"
fi


here=$(pwd)
echo $here

if ! [[ "$audioFile" = /* ]]; then
  audioFile=$here/$(basename "$audioFile")
fi

if ! [[ "$screenFile" = /* ]]; then
  screenFile=$here/$(basename "$screenFile")
fi

if ! [[ "$timingfile" = /* ]]; then
  timingfile=$here/$(basename "$timingfile")
fi

if ! [[ "$finalFileNoFace" = /* ]]; then
  finalFileNoFace=$here/$(basename "$finalFileNoFace")
fi

if [[ -f "$webcamFile" ]]; then

  if ! [[ "$finalFile" = /* ]]; then
    finalFile=$here/$(basename "$finalFile")
    echo $finalFile
  fi
  
  if ! [[ "$webcamWithAudioFile" = /* ]]; then
    webcamWithAudioFile=$here/$(basename "$webcamWithAudioFile")
    echo $webcamWithAudioFile
  fi

  if ! [[ "$webcamFile" = /* ]]; then
    webcamFile=$here/$(basename "$webcamFile")
    echo $webcamFile
  fi

fi

if [ $MOD_AUDIO -eq 1 ]; then
  read -s -p "Do you want to check the audio? [y] to open the audio using $videoplayer. [Esc] to skip this step." -n 1 -r
  echo
  if [[ $REPLY =~ ^[Yy]$ ]]
  then
    echo
    ${videoplayer} ${audioFile} > /dev/null 2>&1
  fi
  echo

  read -s -p "Apply audio gain? [-+][1-9]dB or [n] to skip" -n 2 -r
  echo
  echo $REPLY
  if [[ $REPLY =~ ^[-+]?[1-9]+$ ]]
  then
    echo "applying $REPLY dB of gain"
    sox $audioFile tmp.flac gain -n $REPLY
  fi
else
  if [ $SLIDESHOW -eq 1 ] || [ $WEBCAMAUDIO -eq 1 ] || [ $COMBINED -eq 1 ]; then
    cp $audioFile tmp.flac
  fi
fi
audioFile="tmp.flac"


if [ $SLIDESHOW -eq 1 ]; then
  echo ""
  echo -n "merging audio and video now to '$finalFileNoFace'... "
  ffmpeg -i ${screenFile} -i ${audioFile} -acodec aac -b:a 128k -vcodec libx264rgb -crf 0 -preset veryslow ${finalFileNoFace}
fi


if [[ -f "$webcamFile" ]]; then
  #~ ffmpeg -i ${screenFile} -i ${webcamFile} -i ${audioFile} -filter_complex \
  #~ "[0:v]fps=25,setpts=PTS-STARTPTS[bg]; \
   #~ [1:v]scale=240:-1,setpts=PTS-STARTPTS[fg]; \
   #~ [bg][fg]overlay=W-w-10:10,format=yuv420p[v]" -map "[v]" -map 2:a -acodec aac -b:a 128k -vcodec libx264rgb -crf 0 -preset veryslow ${finalFile}
   
  #~ ffmpeg -i ${webcamFile} -itsoffset 00:00.50 -i ${audioFile} -map 0:v -map 1:a -acodec aac -b:a 128k -vcodec libx264rgb -crf 0 -preset veryslow ${webcamWithAudioFile}
  
  if [ $WEBCAMAUDIO -eq 1 ]; then
    echo
    echo -n "glueing audio and webcam video together to '$webcamWithAudioFile'"
    ffmpeg -i ${webcamFile} -itsoffset 00:00.50 -i ${audioFile} -map 0:v -map 1:a -c copy ${webcamWithAudioFile}
  fi
  
  if [ $COMBINED -eq 1 ]; then
    echo
    echo -n "overlaying slides with webcam now to '$finalFile'... "
    ffmpeg -i ${screenFile} -i ${webcamWithAudioFile} -filter_complex \
    "[0:v]fps=25,setpts=PTS-STARTPTS[bg]; \
     [1:v]scale=480:-1,setpts=PTS-STARTPTS[fg]; \
     [bg][fg]overlay=W-w-10:10,format=yuv420p[v]" -map "[v]" -map 1:a -acodec aac -b:a 128k -vcodec libx264rgb -crf 0 -preset veryslow ${finalFile}
  fi
fi

if [ -s ${timingfile} ]
then
  if [ -f "$finalFileNoFace" -o -f "$finalFile" ]
  then
    echo "################################"
    echo "## found the following chapters:"
    echo ""
    cat ${timingfile}
    echo ""
    echo "################################" 
    read -s -p "Do you want to edit chapter markers? [y] to open a text editor. [Esc] to use the file as is." -n 1 -r
    echo ""
    if [[ $REPLY =~ ^[Yy]$ ]]
    then
      echo ""
      if [[ -f "$finalFileNoFace" ]]; then
        cp ${finalFileNoFace} tmp.mp4
      else
        if [[ -f "$finalFile" ]]; then
          cp ${finalFile} tmp.mp4
        fi
        if [[ -f "tmp.mp4" ]]; then
          MP4Box -chap ${timingfile} tmp.mp4
          ${videoplayer} tmp.mp4 > /dev/null 2>&1 &
          playerPID=$!
          ${texteditor} ${timingfile}
          kill ${playerPID}  > /dev/null 2>&1
          rm -f tmp.mp4
        fi
      fi
    fi
    echo "adding chapters now"
    sed 's/.*S$//g' ${timingfile} > tmp.timing
    if [[ -f "$finalFileNoFace" ]]; then
      MP4Box -chap tmp.timing ${finalFileNoFace}
    fi
    if [[ -f "$finalFile" ]]; then
      MP4Box -chap tmp.timing ${finalFile}
    fi
    rm -f tmp.flac tmp.timing
  fi
#~ else
  #~ rm -f ${timingfile}
fi
